// Generated by view binder compiler. Do not edit!
package com.example.wastewizard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.wastewizard.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentScanBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final MaterialButton btnCapture;

  @NonNull
  public final MaterialButton btnPickImage;

  @NonNull
  public final MaterialButton btnPredict;

  @NonNull
  public final PreviewView cameraPreview;

  @NonNull
  public final MaterialCardView cardRecycle;

  @NonNull
  public final MaterialCardView cardReduce;

  @NonNull
  public final Chip chipLiveResult;

  @NonNull
  public final ImageView imagePreview;

  @NonNull
  public final LinearLayout noImageLayout;

  @NonNull
  public final CircularProgressIndicator progressIndicator;

  @NonNull
  public final MaterialCardView resultCard;

  @NonNull
  public final TextView txtPredicted;

  @NonNull
  public final TextView txtRecycle;

  @NonNull
  public final TextView txtReduce;

  @NonNull
  public final TextView txtTips;

  private FragmentScanBinding(@NonNull NestedScrollView rootView,
      @NonNull MaterialButton btnCapture, @NonNull MaterialButton btnPickImage,
      @NonNull MaterialButton btnPredict, @NonNull PreviewView cameraPreview,
      @NonNull MaterialCardView cardRecycle, @NonNull MaterialCardView cardReduce,
      @NonNull Chip chipLiveResult, @NonNull ImageView imagePreview,
      @NonNull LinearLayout noImageLayout, @NonNull CircularProgressIndicator progressIndicator,
      @NonNull MaterialCardView resultCard, @NonNull TextView txtPredicted,
      @NonNull TextView txtRecycle, @NonNull TextView txtReduce, @NonNull TextView txtTips) {
    this.rootView = rootView;
    this.btnCapture = btnCapture;
    this.btnPickImage = btnPickImage;
    this.btnPredict = btnPredict;
    this.cameraPreview = cameraPreview;
    this.cardRecycle = cardRecycle;
    this.cardReduce = cardReduce;
    this.chipLiveResult = chipLiveResult;
    this.imagePreview = imagePreview;
    this.noImageLayout = noImageLayout;
    this.progressIndicator = progressIndicator;
    this.resultCard = resultCard;
    this.txtPredicted = txtPredicted;
    this.txtRecycle = txtRecycle;
    this.txtReduce = txtReduce;
    this.txtTips = txtTips;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentScanBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentScanBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_scan, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentScanBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCapture;
      MaterialButton btnCapture = ViewBindings.findChildViewById(rootView, id);
      if (btnCapture == null) {
        break missingId;
      }

      id = R.id.btnPickImage;
      MaterialButton btnPickImage = ViewBindings.findChildViewById(rootView, id);
      if (btnPickImage == null) {
        break missingId;
      }

      id = R.id.btnPredict;
      MaterialButton btnPredict = ViewBindings.findChildViewById(rootView, id);
      if (btnPredict == null) {
        break missingId;
      }

      id = R.id.cameraPreview;
      PreviewView cameraPreview = ViewBindings.findChildViewById(rootView, id);
      if (cameraPreview == null) {
        break missingId;
      }

      id = R.id.cardRecycle;
      MaterialCardView cardRecycle = ViewBindings.findChildViewById(rootView, id);
      if (cardRecycle == null) {
        break missingId;
      }

      id = R.id.cardReduce;
      MaterialCardView cardReduce = ViewBindings.findChildViewById(rootView, id);
      if (cardReduce == null) {
        break missingId;
      }

      id = R.id.chipLiveResult;
      Chip chipLiveResult = ViewBindings.findChildViewById(rootView, id);
      if (chipLiveResult == null) {
        break missingId;
      }

      id = R.id.imagePreview;
      ImageView imagePreview = ViewBindings.findChildViewById(rootView, id);
      if (imagePreview == null) {
        break missingId;
      }

      id = R.id.noImageLayout;
      LinearLayout noImageLayout = ViewBindings.findChildViewById(rootView, id);
      if (noImageLayout == null) {
        break missingId;
      }

      id = R.id.progressIndicator;
      CircularProgressIndicator progressIndicator = ViewBindings.findChildViewById(rootView, id);
      if (progressIndicator == null) {
        break missingId;
      }

      id = R.id.resultCard;
      MaterialCardView resultCard = ViewBindings.findChildViewById(rootView, id);
      if (resultCard == null) {
        break missingId;
      }

      id = R.id.txtPredicted;
      TextView txtPredicted = ViewBindings.findChildViewById(rootView, id);
      if (txtPredicted == null) {
        break missingId;
      }

      id = R.id.txtRecycle;
      TextView txtRecycle = ViewBindings.findChildViewById(rootView, id);
      if (txtRecycle == null) {
        break missingId;
      }

      id = R.id.txtReduce;
      TextView txtReduce = ViewBindings.findChildViewById(rootView, id);
      if (txtReduce == null) {
        break missingId;
      }

      id = R.id.txtTips;
      TextView txtTips = ViewBindings.findChildViewById(rootView, id);
      if (txtTips == null) {
        break missingId;
      }

      return new FragmentScanBinding((NestedScrollView) rootView, btnCapture, btnPickImage,
          btnPredict, cameraPreview, cardRecycle, cardReduce, chipLiveResult, imagePreview,
          noImageLayout, progressIndicator, resultCard, txtPredicted, txtRecycle, txtReduce,
          txtTips);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
