// Generated by view binder compiler. Do not edit!
package com.example.wastewizard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.wastewizard.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemLeaderboardBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialCardView cardLeaderboardEntry;

  @NonNull
  public final TextView txtLevel;

  @NonNull
  public final TextView txtName;

  @NonNull
  public final TextView txtPoints;

  @NonNull
  public final TextView txtRank;

  private ItemLeaderboardBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialCardView cardLeaderboardEntry, @NonNull TextView txtLevel,
      @NonNull TextView txtName, @NonNull TextView txtPoints, @NonNull TextView txtRank) {
    this.rootView = rootView;
    this.cardLeaderboardEntry = cardLeaderboardEntry;
    this.txtLevel = txtLevel;
    this.txtName = txtName;
    this.txtPoints = txtPoints;
    this.txtRank = txtRank;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemLeaderboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemLeaderboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_leaderboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemLeaderboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      MaterialCardView cardLeaderboardEntry = (MaterialCardView) rootView;

      id = R.id.txtLevel;
      TextView txtLevel = ViewBindings.findChildViewById(rootView, id);
      if (txtLevel == null) {
        break missingId;
      }

      id = R.id.txtName;
      TextView txtName = ViewBindings.findChildViewById(rootView, id);
      if (txtName == null) {
        break missingId;
      }

      id = R.id.txtPoints;
      TextView txtPoints = ViewBindings.findChildViewById(rootView, id);
      if (txtPoints == null) {
        break missingId;
      }

      id = R.id.txtRank;
      TextView txtRank = ViewBindings.findChildViewById(rootView, id);
      if (txtRank == null) {
        break missingId;
      }

      return new ItemLeaderboardBinding((MaterialCardView) rootView, cardLeaderboardEntry, txtLevel,
          txtName, txtPoints, txtRank);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
