// Generated by view binder compiler. Do not edit!
package com.example.wastewizard.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.wastewizard.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnCapture;

  @NonNull
  public final MaterialButton btnPick;

  @NonNull
  public final MaterialButton btnPredict;

  @NonNull
  public final MaterialCardView cardRecycle;

  @NonNull
  public final MaterialCardView cardReduce;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final CircularProgressIndicator progressIndicator;

  @NonNull
  public final MaterialCardView resultCard;

  @NonNull
  public final LinearLayout tipsCardsContainer;

  @NonNull
  public final MaterialToolbar topAppBar;

  @NonNull
  public final MaterialTextView txtPredicted;

  @NonNull
  public final MaterialTextView txtRecycle;

  @NonNull
  public final MaterialTextView txtRecycleTitle;

  @NonNull
  public final MaterialTextView txtReduce;

  @NonNull
  public final MaterialTextView txtReduceTitle;

  @NonNull
  public final MaterialTextView txtTips;

  private ActivityMainBinding(@NonNull LinearLayout rootView, @NonNull MaterialButton btnCapture,
      @NonNull MaterialButton btnPick, @NonNull MaterialButton btnPredict,
      @NonNull MaterialCardView cardRecycle, @NonNull MaterialCardView cardReduce,
      @NonNull ImageView imageView, @NonNull CircularProgressIndicator progressIndicator,
      @NonNull MaterialCardView resultCard, @NonNull LinearLayout tipsCardsContainer,
      @NonNull MaterialToolbar topAppBar, @NonNull MaterialTextView txtPredicted,
      @NonNull MaterialTextView txtRecycle, @NonNull MaterialTextView txtRecycleTitle,
      @NonNull MaterialTextView txtReduce, @NonNull MaterialTextView txtReduceTitle,
      @NonNull MaterialTextView txtTips) {
    this.rootView = rootView;
    this.btnCapture = btnCapture;
    this.btnPick = btnPick;
    this.btnPredict = btnPredict;
    this.cardRecycle = cardRecycle;
    this.cardReduce = cardReduce;
    this.imageView = imageView;
    this.progressIndicator = progressIndicator;
    this.resultCard = resultCard;
    this.tipsCardsContainer = tipsCardsContainer;
    this.topAppBar = topAppBar;
    this.txtPredicted = txtPredicted;
    this.txtRecycle = txtRecycle;
    this.txtRecycleTitle = txtRecycleTitle;
    this.txtReduce = txtReduce;
    this.txtReduceTitle = txtReduceTitle;
    this.txtTips = txtTips;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCapture;
      MaterialButton btnCapture = ViewBindings.findChildViewById(rootView, id);
      if (btnCapture == null) {
        break missingId;
      }

      id = R.id.btnPick;
      MaterialButton btnPick = ViewBindings.findChildViewById(rootView, id);
      if (btnPick == null) {
        break missingId;
      }

      id = R.id.btnPredict;
      MaterialButton btnPredict = ViewBindings.findChildViewById(rootView, id);
      if (btnPredict == null) {
        break missingId;
      }

      id = R.id.cardRecycle;
      MaterialCardView cardRecycle = ViewBindings.findChildViewById(rootView, id);
      if (cardRecycle == null) {
        break missingId;
      }

      id = R.id.cardReduce;
      MaterialCardView cardReduce = ViewBindings.findChildViewById(rootView, id);
      if (cardReduce == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.progressIndicator;
      CircularProgressIndicator progressIndicator = ViewBindings.findChildViewById(rootView, id);
      if (progressIndicator == null) {
        break missingId;
      }

      id = R.id.resultCard;
      MaterialCardView resultCard = ViewBindings.findChildViewById(rootView, id);
      if (resultCard == null) {
        break missingId;
      }

      id = R.id.tipsCardsContainer;
      LinearLayout tipsCardsContainer = ViewBindings.findChildViewById(rootView, id);
      if (tipsCardsContainer == null) {
        break missingId;
      }

      id = R.id.topAppBar;
      MaterialToolbar topAppBar = ViewBindings.findChildViewById(rootView, id);
      if (topAppBar == null) {
        break missingId;
      }

      id = R.id.txtPredicted;
      MaterialTextView txtPredicted = ViewBindings.findChildViewById(rootView, id);
      if (txtPredicted == null) {
        break missingId;
      }

      id = R.id.txtRecycle;
      MaterialTextView txtRecycle = ViewBindings.findChildViewById(rootView, id);
      if (txtRecycle == null) {
        break missingId;
      }

      id = R.id.txtRecycleTitle;
      MaterialTextView txtRecycleTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtRecycleTitle == null) {
        break missingId;
      }

      id = R.id.txtReduce;
      MaterialTextView txtReduce = ViewBindings.findChildViewById(rootView, id);
      if (txtReduce == null) {
        break missingId;
      }

      id = R.id.txtReduceTitle;
      MaterialTextView txtReduceTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtReduceTitle == null) {
        break missingId;
      }

      id = R.id.txtTips;
      MaterialTextView txtTips = ViewBindings.findChildViewById(rootView, id);
      if (txtTips == null) {
        break missingId;
      }

      return new ActivityMainBinding((LinearLayout) rootView, btnCapture, btnPick, btnPredict,
          cardRecycle, cardReduce, imageView, progressIndicator, resultCard, tipsCardsContainer,
          topAppBar, txtPredicted, txtRecycle, txtRecycleTitle, txtReduce, txtReduceTitle, txtTips);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
